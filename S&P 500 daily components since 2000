### Daily S&P 500 components builder ###

source <- read.csv("SP500_historical_v2.csv", stringsAsFactors = FALSE)
source$Date <- as.Date(source$Date,format = "%m/%d/%y")
source = as.data.frame(source)
# compiling all tickers into 1 vector
all_tickers = c(source[, 2], source[, 3], source[, 4], source[, 5])
all_tickers = unique(all_tickers[all_tickers != ""])
# retrieving all trading days dates and building the dataframe with tickers on rows and dates on columns - I use MSFT since is one of the oldest/ most liquid stocks
aux_dates = Quandl.datatable('SHARADAR/SEP', ticker = 'MSFT', date.gte = '1999-12-31', date.lte = Sys.Date(), qopts.columns=c('date'), paginate=TRUE)
aux_dates = aux_dates[, 1]
aux_dates = sort(aux_dates, decreasing = FALSE)
aux_dates = as.character(aux_dates)
master_components = as.data.frame(all_tickers)
master_components[, aux_dates] <- 0
# 
starting_ticker = source[, 5]
ticker_changes = source[, 1:3]
end_ticker = source[, 4]
### final dataframe will have 1's when ticker was part of S&P500 and 0's otherwise
# create aux dataframe with add/removal dates for each ticker
info_tickers = data.frame(all_tickers)
info_tickers[, 2:9] = 0
colnames(info_tickers) <- c("ticker", "times_added", "times_removed", "start_date", "date_added_1", "date_removed_1", "date_added_2", "date_removed_2", "end_date")
# counting how many times ticker was added/removed from SP500
# inserting tickers that are in the start and end date
# than adding dates they added / removed in between
for (i in 1:nrow(info_tickers)) {
  #
  ticker = as.character(info_tickers$ticker[i])
  # counting
  info_tickers$times_added[i] = sum(ticker_changes$AddTicker == ticker)
  info_tickers$times_removed[i] = sum(ticker_changes$RemovedTicker == ticker)
  # starting tickers
  if (is.na(match(ticker, starting_ticker))) {
  } else {
    info_tickers$start_date[i] = aux_dates[1]
  }
  # end tickers
  if (is.na(match(ticker, end_ticker))) {
  } else {
    info_tickers$end_date[i] = aux_dates[length(aux_dates)]
  }
  # tickers added in between
  if (info_tickers$times_added[i] == 1) {
    info_tickers$date_added_1[i] = ticker_changes$Date[grep(ticker, ticker_changes$AddTicker)[1]]
  } else if (info_tickers$times_added[i] == 2){
    info_tickers$date_added_1[i] = ticker_changes$Date[grep(ticker, ticker_changes$AddTicker)[1]]
    info_tickers$date_added_2[i] = ticker_changes$Date[grep(ticker, ticker_changes$AddTicker)[2]]
  }
  # tickers removed in between
  if (info_tickers$times_removed[i] == 1) {
    info_tickers$date_removed_1[i] = ticker_changes$Date[grep(ticker, ticker_changes$RemovedTicker)[1]]
  } else if (info_tickers$times_removed[i] == 2){
    info_tickers$date_removed_1[i] = ticker_changes$Date[grep(ticker, ticker_changes$RemovedTicker)[1]]
    info_tickers$date_removed_2[i] = ticker_changes$Date[grep(ticker, ticker_changes$RemovedTicker)[2]]
  }
}
# making data formats consistent
info_tickers[, 4:9][info_tickers[, 4:9] == 0] <- NA
#
info_tickers$start_date = as.Date(info_tickers$start_date, format = "%Y-%m-%d")
info_tickers$end_date = as.Date(info_tickers$end_date, format = "%Y-%m-%d")
info_tickers$date_added_1 = as.Date(info_tickers$date_added_1, format = "%Y-%m-%d")
info_tickers$date_removed_1 = as.Date(info_tickers$date_removed_1, format = "%Y-%m-%d")
info_tickers$date_added_2 = as.Date(info_tickers$date_added_2, format = "%Y-%m-%d")
info_tickers$date_removed_2 = as.Date(info_tickers$date_removed_2, format = "%Y-%m-%d")
#
# check if tickers were added/removed correctly 
# to be correct value should be 0
info_tickers$check = NA
for (i in 1:nrow(info_tickers)) {
  if (is.na(info_tickers$start_date[i])) {
    start = 0
  } else {
    start = 1
  }
  if (is.na(info_tickers$end_date[i])) {
    end = 0
  } else {
    end = 1
  }
  info_tickers$check[i] = start + info_tickers$times_added[i] - info_tickers$times_removed[i] - end
}
table(info_tickers$check)
#
#
# ALL GOOD
#
#
### time to translate this info to the main file "master_components"
for (i in 1:nrow(info_tickers)) {
  #
  ticker = as.character(info_tickers$ticker[i])
  dates_add_remove = info_tickers[i, 4:9]
  dates_add_remove = dates_add_remove[!is.na(dates_add_remove)]
  dates_add_remove = sort(dates_add_remove, decreasing = FALSE)
  option = length(dates_add_remove)
  print(i)
  if (option == 2) {
    #
    start_column_1 = match(as.Date(dates_add_remove[1], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d"))
    end_column_1 = match(as.Date(dates_add_remove[2], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d")) - 1
    #
    master_components[as.character(master_components$all_tickers) == ticker, start_column_1:end_column_1] = 1
    #
  } else if (option == 4) {
    #
    start_column_1 = match(as.Date(dates_add_remove[1], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d"))
    end_column_1 = match(as.Date(dates_add_remove[2], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d")) - 1
    start_column_2 = match(as.Date(dates_add_remove[3], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d"))
    end_column_2 = match(as.Date(dates_add_remove[4], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d")) - 1
    #
    master_components[as.character(master_components$all_tickers) == ticker, start_column_1:end_column_1] = 1
    master_components[as.character(master_components$all_tickers) == ticker, start_column_2:end_column_2] = 1
    #
  } else if (option == 6) {
    #
    start_column_1 = match(as.Date(dates_add_remove[1], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d"))
    end_column_1 = match(as.Date(dates_add_remove[2], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d")) - 1
    start_column_2 = match(as.Date(dates_add_remove[3], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d"))
    end_column_2 = match(as.Date(dates_add_remove[4], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d")) - 1
    start_column_3 = match(as.Date(dates_add_remove[5], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d"))
    end_column_3 = match(as.Date(dates_add_remove[6], format = "%Y-%m-%d"), as.Date(colnames(master_components), format="%Y-%m-%d")) - 1
    #
    master_components[as.character(master_components$all_tickers) == ticker, start_column_1:end_column_1] = 1
    master_components[as.character(master_components$all_tickers) == ticker, start_column_2:end_column_2] = 1
    master_components[as.character(master_components$all_tickers) == ticker, start_column_3:end_column_3] = 1
    #
  } else {
    print("ERRO")
  }
}
# number of S&P500 components over time
number_of_components = c()
j = 1
for (i in 2:length(colnames(master_components))) {
  number_of_components[j] = sum(master_components[,i])
  j = j + 1
}
# plot vs. 100%
plot(number_of_components/500)
